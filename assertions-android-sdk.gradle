import sun.lwawt.macosx.CPrinterDevice

apply from: '../assertions-sdk.gradle'

/**
 * Change archivesBaseName as described in sdkLibNames mapping above.
 */
android {
    defaultConfig {
        archivesBaseName = assertionsSdkLibNames[project.name]
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    exclude '**/R.html', '**/R.*.html', '**/index.html'
    failOnError false
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

project.afterEvaluate {
    publishing {
        publications {
            maven(MavenPublication) {
                artifact bundleReleaseAar
                artifact androidSourcesJar
                artifact androidJavadocsJar

                pom {
                    withXml {
                        def dependenciesNode = asNode().appendNode('dependencies')
                        // api already included in configurations.implementation dependencies list.
                        configurations.implementation.allDependencies.each {

                            if (it.group != null && (it.name != null && "unspecified" != it.name) && (it.version != null && "unspecified" != it.version)) {
                                /**
                                 * Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                                 */
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', it.group)
                                dependencyNode.appendNode('artifactId', it.name)
                                dependencyNode.appendNode('version', it.version)
                            } else if (assertionsSdkLibNames[it.name]) {
                                /**
                                 * It is local project dependency and it is declared in sdkLibNames above.
                                 */
                                def dependencyNode = dependenciesNode.appendNode('dependency')
                                dependencyNode.appendNode('groupId', assertionSdkGroup)
                                dependencyNode.appendNode('artifactId', assertionsSdkLibNames[it.name])
                                dependencyNode.appendNode('version', assertionSdkVersion)
                            }
                        }
                    }
                }
            }
        }
    }
}
